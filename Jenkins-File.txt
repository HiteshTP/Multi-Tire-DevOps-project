pipeline {
    agent any

    tools {
        maven 'maven3'
    }

    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }

    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'master', url: 'https://github.com/Gokul-Prabakran1/Multi-Tier-DevOps-With-SSL.git'
            }
        }

        stage('Compile') {
            steps {
                sh 'mvn compile'
            }
        }

        stage('Test') {
            steps {
                sh 'mvn test'
            }
        }

        stage('File System Scan') {
            steps {
                sh 'trivy fs --format table -o trivy-fs1-report.html .'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar') {
                    sh """
                        ${SCANNER_HOME}/bin/sonar-scanner \
                        -Dsonar.projectName=Multi-tier-ssl \
                        -Dsonar.projectKey=Multi-tier-ssl \
                        -Dsonar.java.binaries=target
                    """
                }
            }
        }

        stage('Quality Gate') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
                }
            }
        }

        stage('Build') {
            steps {
                sh 'mvn package'
            }
        }

        stage('Build & Tag Docker Image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                        sh 'docker build -t gokul72/multi-ssl:latest .'
                    }
                }
            }
        }

        stage('Trivy Image Scan') {
            steps {
                sh 'trivy image --format table -o fs-report.html gokul72/multi-ssl:latest'
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                        sh 'docker push gokul72/multi-ssl:latest'
                    }
                }
            }
        }

        stage('EKS Deploy') {
            steps {
                script {
                    withKubeConfig(
                        credentialsId: 'k8s-token', 
                        clusterName: 'gokul', 
                        namespace: 'webapps', 
                        serverUrl: 'https://5681EF9A6D88C2C5766600CB8D94F18A.gr7.ap-southeast-2.eks.amazonaws.com'
                    ) {
                        sh 'kubectl apply -f app.yml'
                        sh 'kubectl apply -f db.yml'
                    }
                }
            }
        }
    }
}
